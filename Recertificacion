
import React, { useState } from 'react';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';
import axios from 'axios';

const ExcelImport = () => {
  const [fileData, setFileData] = useState([]);
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);
  const [puestos, setPuestos] = useState([]);

  const handleFileUpload = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    
    const reader = new FileReader();
    reader.onload = (event) => {
      const data = new Uint8Array(event.target.result);
      const workbook = XLSX.read(data, { type: 'array' });
      const sheetName = workbook.SheetNames[0];
      const sheet = workbook.Sheets[sheetName];
      const jsonData = XLSX.utils.sheet_to_json(sheet);
      setFileData(jsonData);
    };
    reader.readAsArrayBuffer(file);
  };

  const compareData = async () => {
    setLoading(true);
    try {
      const response = await axios.get('http://localhost:3000/puesto/');
      const puestosData = response.data;
      setPuestos(puestosData);

      const results = fileData.map((item) => {
        const matchingPuesto = puestosData.find(puesto => puesto.Codigo === item.Codigo);
        if (!matchingPuesto) {
          return { ...item, status: 'No encontrado' };
        } else if (matchingPuesto.N_Puesto !== item.N_Puesto) {
          return { ...item, status: 'Nombre diferente' };
        } else {
          return { ...item, status: 'Correcto' };
        }
      });

      setResults(results);
    } catch (error) {
      console.error('Error comparing data', error);
    }
    setLoading(false);
  };

  const downloadResults = () => {
    const worksheet = XLSX.utils.json_to_sheet(results);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Resultados');
    const wbout = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
    saveAs(new Blob([wbout], { type: 'application/octet-stream' }), 'resultados.xlsx');
  };

  const downloadPuestos = async () => {
    try {
      const response = await axios.get('http://localhost:3000/puesto/');
      const puestosData = response.data;
      const worksheet = XLSX.utils.json_to_sheet(puestosData);
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, 'Puestos');
      const wbout = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
      saveAs(new Blob([wbout], { type: 'application/octet-stream' }), 'puestos.xlsx');
    } catch (error) {
      console.error('Error downloading Puestos data', error);
    }
  };

  return (
    <div>
      <h2>Importar y Comparar Datos</h2>
      <input type="file" accept=".xlsx, .xls" onChange={handleFileUpload} />
      <button onClick={compareData} disabled={loading}>
        {loading ? 'Comparando...' : 'Comparar Datos'}
      </button>
      <button onClick={downloadPuestos}>Descargar Puestos</button>
      {results.length > 0 && (
        <div>
          <h3>Resultados</h3>
          <table>
            <thead>
              <tr>
                <th>CÃ³digo</th>
                <th>Nombre</th>
                <th>Estado</th>
              </tr>
            </thead>
            <tbody>
              {results.map((result, index) => (
                <tr key={index}>
                  <td>{result.Codigo}</td>
                  <td>{result.N_Puesto}</td>
                  <td>{result.status}</td>
                </tr>
              ))}
            </tbody>
          </table>
          <button onClick={downloadResults}>Descargar Resultados</button>
        </div>
      )}
    </div>
  );
};

export default ExcelImport;
