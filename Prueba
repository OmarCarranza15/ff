const Roles = () => {
  // ...resto del código...

  const handleEditChange = (event, field) => {
    const { value, type, checked } = event.target;

    if (type === "checkbox") {
      setEditedRow(prevState => ({
        ...prevState,
        [field]: checked,
      }));
    } else if (field === "Paises") {
      const selectedOptions = Array.from(event.target.selectedOptions, option => option.value);
      setEditedRow(prevState => ({
        ...prevState,
        Paises: selectedOptions,
      }));
    } else {
      setEditedRow(prevState => ({
        ...prevState,
        [field]: value,
      }));
    }
  };

  const saveChanges = async (id) => {
    try {
      const updateRow = {
        ...editedRow,
        Insertar: editedRow.Insertar ? 1 : 2,
        Editar: editedRow.Editar ? 1 : 2,
        Paises: editedRow.Paises.join(","),
      };
  
      await axios.put(`http://localhost:3000/rolusuario/${id}`, updateRow);
  
      const updatedRecords = records.map(row =>
        row.id === id ? { ...updateRow, id } : row
      );
  
      setRecords(updatedRecords);
      setEditedRow(null);
      setEditMode(null);
  
      console.log("Cambios guardados correctamente");
    } catch (error) {
      console.error("Error al guardar los cambios", error);
    }
  };

  const columns = [
    {
      name: "Roles",
      selector: row => row.N_Rol,
      sortable: true,
      minWidth: "330px",
      cell: row =>
        editMode && editedRow?.id === row.id ? (
          <input
            type="text"
            value={editedRow.N_Rol}
            onChange={e => handleEditChange(e, "N_Rol")}
          />
        ) : (
          <div>{row.N_Rol}</div>
        ),
    },
    {
      name: "Descripcion",
      selector: row => row.Des_Rol,
      sortable: true,
      minWidth: "330px",
      cell: row =>
        editMode && editedRow?.id === row.id ? (
          <input
            type="text"
            value={editedRow.Des_Rol}
            onChange={e => handleEditChange(e, "Des_Rol")}
          />
        ) : (
          <div>{row.Des_Rol}</div>
        ),
    },
    {
      name: "Fecha de Creacion",
      selector: row => row.Fec_Creacion,
      sortable: true,
      minWidth: "150px",
      cell: row =>
        editMode && editedRow?.id === row.id ? (
          <input
            type="text"
            value={editedRow.Fec_Creacion}
            onChange={e => handleEditChange(e, "Fec_Creacion")}
          />
        ) : (
          <div>{row.Fec_Creacion}</div>
        ),
    },
    {
      name: "Permiso de Insertar",
      selector: row => row.Insertar,
      sortable: true,
      minWidth: "170px",
      cell: row =>
        editMode && editedRow?.id === row.id ? (
          <CustomCheckbox
            checked={editedRow.Insertar}
            onChange={e => handleEditChange(e, "Insertar")}
          />
        ) : (
          <CustomCheckbox
            checked={row.Insertar === 1}
            disabled
          />
        ),
    },
    {
      name: "Permiso de Editar",
      selector: row => row.Editar,
      sortable: true,
      minWidth: "170px",
      cell: row =>
        editMode && editedRow?.id === row.id ? (
          <CustomCheckbox
            checked={editedRow.Editar}
            onChange={e => handleEditChange(e, "Editar")}
          />
        ) : (
          <CustomCheckbox
            checked={row.Editar === 1}
            disabled
          />
        ),
    },
    {
      name: "Paises",
      selector: row => row.Paises.join(", "),
      sortable: true,
      minWidth: "330px",
      cell: row =>
        editMode && editedRow?.id === row.id ? (
          <Select
            isMulti
            value={editedRow.Paises.map(id => ({
              value: id,
              label: pais.find(a => a.id === id)?.N_Pais,
            }))}
            options={pais.map(a => ({
              value: a.id,
              label: a.N_Pais,
            }))}
            onChange={selectedOptions => {
              const selectedValues = selectedOptions.map(option => option.value);
              setEditedRow(prevState => ({
                ...prevState,
                Paises: selectedValues,
              }));
            }}
          />
        ) : (
          <div>{row.Paises.join(', ')}</div>
        ),
    },
    {
      name: "Acciones",
      cell: row =>
        editMode === row.id ? (
          <div style={{ display: "flex", justifyContent: "center" }}>
            <Button onClick={() => saveChanges(row.id)}>
              <FaSave />
            </Button>
            <ButtonCancelar cancel onClick={cancelEdit}>
              <FaTimes />
            </ButtonCancelar>
          </div>
        ) : (
          <Button onClick={() => startEdit(row)}>
            <FaEdit />
          </Button>
        ),
    },
  ];

  return (
    <MainContainer>
      {/* ...resto del código... */}
    </MainContainer>
  );
}

export default Roles;