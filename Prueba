useEffect(() => {
  const fetchData = async () => {
    setLoading(true);
    try {
      const response = await axios.get(`http://localhost:3000/aplicacion/`);
      const data = response.data;
      const mappedData = await Promise.all(
        data.map(async (aplicacion) => {
          const paisResponse = await axios.get(
            `http://localhost:3000/pais/${aplicacion.ID_Pais}`
          );

          const ambienteIds = aplicacion.Ambientes.split(',').map(Number);
          const ambienteNombres = await Promise.all(
            ambienteIds.map(async (id) => {
              const ambienteResponse = await axios.get(
                `http://localhost:3000/ambiente/${id}`
              );
              return ambienteResponse.data.N_Ambiente;
            })
          );

          return {
            id: aplicacion.id,
            N_Aplicaciones: aplicacion.N_Aplicaciones,
            ID_Pais: aplicacion.ID_Pais,
            N_Pais: paisResponse.data.N_Pais,
            Ambientes: ambienteNombres,
          };
        })
      );
      setRecords(mappedData);
    } catch (error) {
      console.error("Error al obtener los Ambientes:", error);
    } finally {
      setLoading(false);
    }
  };

  const fetchPais = async () => {
    try {
      const response = await axios.get(`http://localhost:3000/pais/`);
      setPais(response.data);
    } catch (error) {
      console.error("Error al obtener la lista de Paises", error);
    }
  };

  const fetchAmbiente = async () => {
    try {
      const response = await axios.get(`http://localhost:3000/ambiente/`);
      setAmbiente(response.data);
    } catch (error) {
      console.error("Error al obtener la lista de ambientes", error);
    }
  };

  fetchData();
  fetchPais();
  fetchAmbiente();
}, []);

const handleModalChange = (event, field) => {
  const { value } = event.target;
  setModalValues((prevValues) => ({
    ...prevValues,
    [field]: value,
  }));
};

const SaveModal = async () => {
  const newErrors = { pais: "", aplicacion: "", ambientes: "" };

  if (!modalValues.ID_Pais) {
    newErrors.pais = "El campo Pais es obligatorio";
  }
  if (!modalValues.Ambientes.length) {
    newErrors.ambientes = "El campo Ambiente es obligatorio";
  }

  if (!modalValues.aplicacion.trim()) {
    newErrors.aplicacion = "El campo aplicacion es obligatorio";
  }
  setErrors(newErrors);

  if (Object.values(newErrors).every((error) => error === "")) {
    try {
      const response = await axios.get(`http://localhost:3000/aplicacion`);
      const aplicacionExists = response.data.some(
        (aplicacion) =>
          aplicacion.N_Aplicaciones.toLowerCase() ===
          modalValues.aplicacion.toLowerCase()
      );
      if (aplicacionExists) {
        setErrors({ aplicacion: "El Aplicacion ya existe" });
        return;
      }

      const newAplicacion = {
        N_Aplicaciones: modalValues.aplicacion,
        ID_Pais: modalValues.ID_Pais,
        Ambientes: modalValues.Ambientes.join(","),
      };
      const insertResponse = await axios.post(
        `http://localhost:3000/aplicacion`,
        newAplicacion
      );

      const paisResponse = await axios.get(
        `http://localhost:3000/pais/${modalValues.ID_Pais}`
      );
      const updatedRecords = [
        ...records,
        {
          id: insertResponse.data.id,
          N_Aplicaciones: modalValues.aplicacion,
          ID_Pais: modalValues.ID_Pais,
          N_Pais: paisResponse.data.N_Pais,
          Ambientes: modalValues.Ambientes.map(id => ambiente.find(a => a.id === id)?.N_Ambiente),
        },
      ];
      setRecords(updatedRecords);
      handleCloseModal(); 
    } catch (error) {
      console.error("Error al insertar un nuevo Ambiente:", error);
    }
  }
};

const saveChanges = async (id) => {
  try {
    const updateRow = {
      ...editedRow,
      Ambientes: editedRow.Ambientes.join(", "),
    };

    await axios.put(`http://localhost:3000/aplicacion/${id}`, updateRow);

    const updatedRecords = records.map((row) =>
      row.id === id ? { ...editedRow } : row
    );

    setRecords(updatedRecords);
    setEditedRow(null);
    setEditMode(null);

    console.log("Cambios guardados correctamente");
  } catch (error) {
    console.error("Error al guardar los cambios", error);
  }
};

const filteredData = records.filter((row) => {
  return (
    (filters.N_Pais === "" ||
      row.N_Pais.toLowerCase().includes(filters.N_Pais.toLowerCase())) &&
    (filters.N_Aplicaciones === "" ||
      row.N_Aplicaciones.toLowerCase().includes(
        filters.N_Aplicaciones.toLowerCase()
      )) &&
    (filters.N_Ambiente === "" ||
      row.Ambientes.join(', ').toLowerCase().includes(filters.N_Ambiente.toLowerCase()))
  );
});