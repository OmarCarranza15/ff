const columns = [
  {
    name: "N°",
    selector: (row, index) => index + 1,
    sortable: true,
    minWidth: "50px",
    maxWidth: "100px",
  },
  {
    name: "País",
    selector: (row) => row.id,
    sortable: true,
    minWidth: "200px", // Ajusta el tamaño mínimo según sea necesario
    maxWidth: "500px", // Ajusta el tamaño máximo según sea necesario
    cell: (row) =>
      editMode && editedRow?.id === row.id ? (
        <input
          type="text"
          value={editedRow.N_Pais}
          onChange={(e) => handleEditChange(e, "N_Pais")}
          onKeyPress={(e) => {
            if (!/[a-zA-ZñÑáéíóúÁÉÍÓÚ]/.test(e.key)) {
              e.preventDefault();
            }
          }}
          style={{ width: '100%' }} // Asegúrate de que el input ocupe el ancho completo
        />
      ) : (
        <div>{row.N_Pais}</div>
      ),
  },
  {
    name: "Acciones",
    cell: (row) =>
      editMode === row.id ? (
        <ButtonGroup>
          <Button
            type="button"
            className="btn btn-outline-success"
            onClick={() => saveChanges(row.id)}
          >
            Guardar
          </Button>
          <Button
            type="button"
            className="btn btn-outline-danger"
            onClick={cancelEdit}
          >
            Cancelar
          </Button>
        </ButtonGroup>
      ) : (
        <ButtonGroup>
          <Button
            type="button"
            className="btn btn-outline-primary"
            onClick={() => startEdit(row)}
          >
            Editar
          </Button>
          <Button
            type="button"
            className="btn btn-outline-danger"
            onClick={() => {
              if (
                window.confirm(
                  "¿Estás seguro que deseas eliminar este registro?"
                )
              ) {
                deleteRow(row.id);
              }
            }}
          >
            Eliminar
          </Button>
        </ButtonGroup>
      ),
  },
];