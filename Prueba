 const saveChanges = async (id) => {
  try {
    // Obtener las respuestas para División y País
    const [divisionResponse, paisResponse] = await Promise.all([
      axios.get(`http://localhost:3000/division?N_Division=${editedRow.N_Division}`),
      axios.get(`http://localhost:3000/pais?N_Pais=${editedRow.N_Pais}`)
    ]);

    // Verificar si el país y la división ya existen
    if (
      divisionResponse.data.some(division => 
        division.N_Division.toLowerCase() === editedRow.N_Division.toLowerCase()
      ) &&
      paisResponse.data.some(pais => 
        pais.N_Pais.toLowerCase() === editedRow.N_Pais.toLowerCase()
      )
    ) {
      const errorNotification = document.createElement("div");
      errorNotification.className = "error-notification";
      errorNotification.innerHTML = `
        <span class="error-icon">!</span>
        <span class="error-message">
          El conjunto de País y División que intenta actualizar ya existe en la base de datos.
          Por favor, ingrese un país y una división diferente.
        </span>
      `;
      document.body.appendChild(errorNotification);

      setTimeout(() => {
        errorNotification.remove();
      }, 2000);
      return;
    }

    // Continuar con la lógica de guardar los cambios si no hay conflicto
    const updateRow = { ...editedRow };

    // Verificar si el país ya existe en la base de datos
    const existingCountry = records.find(row =>
      row.N_Pais.toLowerCase() === editedRow.N_Pais.toLowerCase()
    );

    if (existingCountry && existingCountry.id !== id) {
      showNotification("El país ya está registrado");
      return;
    }

    // Obtener el valor original del campo
    const originalRow = records.find(row => row.id === id);

    await axios.put(`http://localhost:3000/pais/${id}`, updateRow);

    const editedIndex = records.findIndex(row => row.id === id) + 1;

    const auditoriaData = {
      Campo_Original: `(País)${originalRow.N_Pais}`,
      Campo_Nuevo: `(País)${editedRow.N_Pais}`,
      Tabla: 'Paises',
      Accion: 2,
      ID_Usuario: userId,
      N: editedIndex
    };

    await axios.post('http://localhost:3000/auditoria', auditoriaData);

    const updatedRecords = records.map(row =>
      row.id === id ? { ...editedRow } : row
    );

    setRecords(updatedRecords);
    setEditedRow(null);
    setEditMode(null);

    showNotification("País actualizado con éxito!", "success");
  } catch (error) {
    console.error("Error al guardar los cambios", error);
  }
};