const saveChanges = async (id) => {
  try {
    const updateRow = {
      ...editedRow,
    };

    // Verificar si la División ya existe en la base de datos para el mismo país
    if (editedRow && editedRow.ID_Pais && editedRow.N_Division) {
      const response = await axios.get(`http://localhost:3000/division`);
      console.log("Response:", response.data);

      const divisionExists = response.data.some((division) => {
        if (
          division.ID_Pais === parseInt(editedRow.ID_Pais) &&
          division.id !== id
        ) {
          const editedDivisionName = editedRow.N_Division
            ? editedRow.N_Division.toLowerCase()
            : "";
          return division.N_Division.toLowerCase() === editedDivisionName;
        }
        return false;
      });

      if (divisionExists) {
        setErrors({ division: "La División ya existe en este país" });

        const errorNotification = document.createElement("div");
        errorNotification.className = "error-notification";
        errorNotification.innerHTML = `
          <span class="error-icon">!</span>
          <span class="error-message">
            La División que intenta registrar ya existe en la base de datos para este país.
            Por favor, ingrese una División diferente.
          </span>
        `;

        document.body.appendChild(errorNotification);

        // Ocultar la notificación después de 2 segundos
        setTimeout(() => {
          errorNotification.remove();
        }, 2000);
        return;
      }
    } else {
      console.error(
        "Error: editedRow.division or editedRow.ID_Pais is undefined or empty"
      );
      setErrors({
        division: "El campo División o País no puede estar vacío",
      });
      return;
    }

    await axios.put(`http://localhost:3000/division/${id}`, updateRow);

    // Obtener el valor original del campo
    const originalRow = records.find((row) => row.id === id);

    // Construir los valores para la auditoría
    const originalCountry = originalRow.N_Pais;
    const originalDivision = originalRow.N_Division;
    const editedCountry = editedRow.N_Pais;
    const editedDivision = editedRow.N_Division;

    const hasCountryChanged = originalCountry !== editedCountry;
    const hasDivisionChanged = originalDivision !== editedDivision;

    const auditoriaData = {
      Campo_Original: [
        hasCountryChanged ? `(País)${originalCountry}` : '',
        hasDivisionChanged ? `(División)${originalDivision}` : ''
      ].filter(Boolean).join(', '),
      Campo_Nuevo: [
        hasCountryChanged ? `(País)${editedCountry}` : '',
        hasDivisionChanged ? `(División)${editedDivision}` : ''
      ].filter(Boolean).join(', '),
      Tabla: 'Divisiones',
      Accion: 2, // Modificación
      ID_Usuario: userId
    };

    if (auditoriaData.Campo_Original || auditoriaData.Campo_Nuevo) {
      await axios.post('http://localhost:3000/auditoria', auditoriaData);
    }

    const updatedRecords = records.map((row) =>
      row.id === id ? { ...editedRow } : row
    );

    setRecords(updatedRecords);
    setEditedRow(null);
    setEditMode(null);

    // Notificación de datos actualizados
    const toastElement = document.createElement("div");
    toastElement.className = "toast-notification";
    toastElement.innerHTML = "¡División actualizada con éxito!";

    document.body.appendChild(toastElement);

    // Ocultar la notificación después de 1 segundo
    setTimeout(() => {
      toastElement.remove();
      window.location.reload(); // Recargar la pagina despues de 1 segundo
    }, 1000);
  } catch (error) {
    console.error("Error al guardar los cambios", error);
  }
};