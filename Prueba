const handleSave = async () => {
  const trimmedPais = newRecord.N_Pais.trim(); // Elimina los espacios en blanco al principio y al final

  if (!trimmedPais) {
    setErrors({ N_Pais: "El campo País no puede estar vacío" });
    showNotification("El campo País no puede estar vacío");
    return;
  }

  try {
    const response = await axios.get(`http://localhost:3000/pais?N_Pais=${trimmedPais}`);

    if (response.data.some(pais => pais.N_Pais.toLowerCase() === trimmedPais.toLowerCase())) {
      const errorNotification = document.createElement("div");
      errorNotification.className = "error-notification";
      errorNotification.innerHTML = `
        <span class="error-icon">!</span>
        <span class="error-message">
          El País que intenta agregar ya existe en la base de datos.
          Por favor, ingrese un país diferente.
        </span>
      `;
      document.body.appendChild(errorNotification);

      setTimeout(() => {
        errorNotification.remove();
      }, 2000);
      return;
    }

    const existingCountry = records.find(row => row.N_Pais.toLowerCase() === trimmedPais.toLowerCase());

    if (existingCountry) {
      setErrors({ N_Pais: "El país ya está registrado" });
      return;
    }

    const saveData = {
      ...newRecord,
      N_Pais: trimmedPais, // Usa el valor recortado
    };

    await axios.post('http://localhost:3000/pais', saveData);

    const auditoriaData = {
      Campo_Original: "- País: No asignado",
      Campo_Nuevo: `- País: ${trimmedPais}`,
      Tabla: 'Paises',
      Accion: 1,
      ID_Usuario: userId,
      N: records.length + 1
    };

    await axios.post('http://localhost:3000/auditoria', auditoriaData);

    setRecords([...records, saveData]);
    setNewRecord({ N_Pais: "" });
    showNotification("País agregado con éxito!");
    window.location.reload();
  } catch (error) {
    console.error("Error al guardar el nuevo país", error);
  }
};