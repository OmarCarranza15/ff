Para implementar la funcionalidad de restablecer la contraseña, puedes agregar una nueva función que genere una nueva contraseña y actualice el estado del usuario en la base de datos. También, debes actualizar el estado del usuario a "nuevo". Aquí te muestro cómo hacerlo:

1. **Añade la función para restablecer la contraseña:**

   Esta función generará una nueva contraseña, actualizará el usuario en la base de datos con la nueva contraseña y cambiará el estado a "nuevo".

   ```jsx
   const resetPassword = async (userId) => {
     try {
       const newPassword = generateRandomPassword();
       // Actualizar el usuario con la nueva contraseña y estado "nuevo"
       await axios.patch(`http://localhost:3000/usuarios/${userId}`, {
         Contrasenia: newPassword,
         Estado: 1 // Cambia el estado a "nuevo"
       });

       // Notificación de éxito
       const toastElement = document.createElement("div");
       toastElement.className = "toast-success";
       toastElement.innerHTML = "¡Contraseña restablecida correctamente!";
       document.body.appendChild(toastElement);
       setTimeout(() => {
         toastElement.remove();
         window.location.reload();
       }, 1000);
     } catch (error) {
       console.error("Error al restablecer la contraseña:", error);
     }
   };
   ```

2. **Modifica el botón "Restablecer" para llamar a la función `resetPassword`:**

   Cambia el evento `onClick` del botón para llamar a `resetPassword` pasando el ID del usuario.

   ```jsx
   {
     name: "Acciones",
     minWidth: "170px", // Ajusta el tamaño mínimo según sea necesario
     maxWidth: "170px", // Ajusta el tamaño máximo según sea necesario
     cell: (row) =>
       editMode === row.id ? (
         <ButtonGroup>
           <Button
             type="button"
             className="btn btn-outline-success"
             onClick={() => saveChanges(row.id)}
           >
             Guardar
           </Button>
           <Button
             type="button"
             className="btn btn-outline-danger"
             onClick={cancelEdit}
           >
             Cancelar
           </Button>
         </ButtonGroup>
       ) : (
         <ButtonGroup>
           <Button
             type="button"
             className="btn btn-outline-primary"
             onClick={() => startEdit(row)}
           >
             Editar
           </Button>
           <Button
             type="button"
             className="btn btn-outline-danger"
             onClick={() => {
               if (
                 window.confirm(
                   "¿Estás seguro que deseas restablecer la contraseña de este Usuario?"
                 )
               ) {
                 resetPassword(row.id); // Llama a la función para restablecer la contraseña
               }
             }}
           >
             Restablecer
           </Button>
         </ButtonGroup>
       ),
   },
   ```

### Explicación:

- **`generateRandomPassword`**: Utiliza tu función existente para generar una nueva contraseña de 12 caracteres.

- **`resetPassword`**: Esta función genera una nueva contraseña, actualiza la base de datos con la nueva contraseña y el estado "nuevo", y muestra una notificación de éxito.

- **`onClick` del botón "Restablecer"**: Llama a la función `resetPassword` solo si el usuario confirma la acción.

Estos cambios permitirán que el botón "Restablecer" genere una nueva contraseña, actualice el usuario en la base de datos, y cambie el estado a "nuevo".