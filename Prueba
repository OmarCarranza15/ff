Para agregar la restricción de no permitir la edición del nombre de un país si ya existe en alguna tabla de tu base de datos, debes realizar algunas modificaciones en tu código. Aquí te muestro cómo hacerlo:

1. **Agregar una función para verificar si el país existe en otras tablas:**

   Primero, necesitas una función que verifique si el país que intentas modificar existe en otras tablas. Esta función hará una solicitud a tu backend para realizar la verificación.

   ```javascript
   const checkIfCountryIsUsed = async (paisName) => {
     try {
       const response = await axios.get(`http://localhost:3000/pais/checkIfUsed?N_Pais=${paisName}`);
       return response.data.isUsed;
     } catch (error) {
       console.error("Error checking if country is used:", error);
       return false;
     }
   };
   ```

2. **Modificar la función `saveChanges` para incluir esta verificación:**

   Antes de guardar los cambios, verifica si el país ya está en uso.

   ```javascript
   const saveChanges = async (id) => {
     try {
       // Verificar si el país ya está en uso en otras tablas
       const isUsed = await checkIfCountryIsUsed(editedRow.N_Pais);

       if (isUsed) {
         const errorNotification = document.createElement("div");
         errorNotification.className = "error-notification";
         errorNotification.innerHTML = `
           <span class="error-icon">!</span>
           <span class="error-message">
             El País que intenta actualizar ya está en uso en otras tablas.
             Por favor, ingrese un nombre de país diferente.
           </span>
         `;
         document.body.appendChild(errorNotification);

         // Ocultar la notificación después de 2 segundos
         setTimeout(() => {
           errorNotification.remove();
         }, 2000);
         return;
       }

       // Check if the updated country is already registered
       const existingCountry = records.find(
         (row) => row.N_Pais.toLowerCase() === editedRow.N_Pais.toLowerCase()
       );

       if (existingCountry && existingCountry.id !== id) {
         setErrors({ N_Pais: "El país ya está registrado" });
         return;
       }

       await axios.put(`http://localhost:3000/pais/${id}`, updateRow);

       const updatedRecords = records.map((row) =>
         row.id === id ? { ...editedRow } : row
       );

       setRecords(updatedRecords);
       setEditedRow(null);
       setEditMode(null);

       // Notificación de datos actualizados
       const toastElement = document.createElement("div");
       toastElement.className = "toast-notification";
       toastElement.innerHTML = "País actualizado con éxito!";

       document.body.appendChild(toastElement);

       // Ocultar la notificación después de 1 segundo
       setTimeout(() => {
         toastElement.remove();
         window.location.reload(); // Recargar la pagina despues de 1 segundo
       }, 1000);
     } catch (error) {
       console.error("Error al guardar los cambios", error);
     }
   };
   ```

3. **En el backend, deberás crear un endpoint para verificar si el país está en uso en otras tablas.**

   Aquí te muestro un ejemplo en pseudocódigo usando Express.js para tu backend:

   ```javascript
   app.get('/pais/checkIfUsed', async (req, res) => {
     const { N_Pais } = req.query;
     try {
       // Realiza consultas a las tablas donde el país podría estar en uso
       const isUsedInOtherTables = await checkCountryUsageInOtherTables(N_Pais);
       res.json({ isUsed: isUsedInOtherTables });
     } catch (error) {
       console.error("Error checking country usage:", error);
       res.status(500).json({ isUsed: false });
     }
   });

   const checkCountryUsageInOtherTables = async (N_Pais) => {
     // Aquí deberías implementar la lógica para verificar en otras tablas
     // Retorna true si el país está en uso, de lo contrario false
   };
   ```

Estas modificaciones aseguran que no puedas editar un país a menos que no esté en uso en otras partes de tu sistema.