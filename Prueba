const saveChanges = async (id) => {
    try {
        const updateRow = {
            ...editedRow,
            Ambientes: editedRow.Ambientes.join(", "),
        };
        
        // Verificar si la aplicación ya existe en la base de datos para el mismo país
        if (editedRow && editedRow.ID_Pais && editedRow.N_Aplicaciones) {
            const response = await axios.get(`http://localhost:3000/aplicacion`);
            console.log("Response:", response.data);

            const aplicacionExists = response.data.some((division) => {
                if (division.ID_Pais === parseInt(editedRow.ID_Pais) && division.id !== id) {
                    const editedAplicacionName = editedRow.N_Aplicaciones ? editedRow.N_Aplicaciones.toLowerCase() : "";
                    return division.N_Aplicaciones.toLowerCase() === editedAplicacionName;
                }
                return false;
            });

            if (aplicacionExists) {
                setErrors({ division: "La aplicación ya existe en este país" });

                const errorNotification = document.createElement("div");
                errorNotification.className = "error-notification";
                errorNotification.innerHTML = `
                    <span class="error-icon">!</span>
                    <span class="error-message">
                      La aplicación que intenta registrar ya existe en la base de datos para este país.
                      Por favor, ingrese una aplicación diferente.
                    </span>
                `;

                document.body.appendChild(errorNotification);

                // Ocultar la notificación después de 2 segundos
                setTimeout(() => {
                    errorNotification.remove();
                }, 2000);
                return;
            }
        } else {
            console.error("Error: editedRow.division or editedRow.ID_Pais is undefined or empty");
            setErrors({
                division: "El campo División o País no puede estar vacío",
            });
            return;
        }

        await axios.put(`http://localhost:3000/aplicacion/${id}`, updateRow);

        // Obtener el valor original del campo
        const originalRow = records.find((row) => row.id === id);

        const editedIndex = records.findIndex((row) => row.id === id) + 1;

        // Construir los valores para la auditoría
        const originalCountry = originalRow.N_Pais;
        const originalAplicacion = originalRow.N_Aplicaciones;
        const originalAmbientes = originalRow.Ambientes.split(", ");
        const editedCountry = editedRow.N_Pais;
        const editedAplicacion = editedRow.N_Aplicaciones;
        const editedAmbientes = editedRow.Ambientes.map(
            (id) => ambiente.find((a) => a.id === id)?.N_Ambiente
        );

        const hasCountryChanged = originalCountry !== editedCountry;
        const hasAplicacionChanged = originalAplicacion !== editedAplicacion;
        const hasAmbienteChanged = originalAmbientes.join(", ") !== editedAmbientes.join(", ");

        const auditoriaData = {
            Campo_Original: [
                hasCountryChanged ? `- País: ${originalCountry}` : '',
                hasAplicacionChanged ? `- Aplicacion: ${originalAplicacion}` : '',
                hasAmbienteChanged ? `- Ambientes: ${originalAmbientes.join(", ")}` : ''
            ].filter(Boolean).join('¬ '),
            Campo_Nuevo: [
                hasCountryChanged ? `- País: ${editedCountry}` : '',
                hasAplicacionChanged ? `- Aplicacion: ${editedAplicacion}` : '',
                hasAmbienteChanged ? `- Ambientes: ${editedAmbientes.join(", ")}` : ''
            ].filter(Boolean).join('¬ '),
            Tabla: 'Aplicaciones',
            Accion: 2, // Modificación
            ID_Usuario: userId,
            N: editedIndex
        };

        if (auditoriaData.Campo_Original || auditoriaData.Campo_Nuevo) {
            await axios.post('http://localhost:3000/auditoria', auditoriaData);
        }

        const updatedRecords = records.map((row) =>
            row.id === id ? { ...editedRow } : row
        );

        setRecords(updatedRecords);
        setEditedRow(null);
        setEditMode(null);

        console.log("Cambios guardados correctamente");
        window.location.reload();
    } catch (error) {
        console.error("Error al guardar los cambios", error);
    }
};