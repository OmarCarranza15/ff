Claro, vamos a ajustar el componente `Stop` para que no incluya la imagen y asegurarnos de que todo esté configurado correctamente.

### **1. Componente `Stop`**

Primero, modifica el componente `Stop` para que no incluya la imagen:

```jsx
// components/Stop.jsx
import { Container } from "react-bootstrap";

export default function Stop({ isAuthenticated, user }) {
    return (
        <Container>
            <div className="mt-3">
                <span className="h1 text-danger">Alto</span>
            </div>
            <div>
                <p className="h5 text-danger">
                    Para visitar esta página necesitas estar registrado como {user}.
                    {isAuthenticated ? (
                        ' Si ya tienes una cuenta, Inicia Sesión.'
                    ) : (
                        ' Si no tienes una cuenta, comunicate con un Administrador para que te asigne una.'
                    )}
                </p>
                {!isAuthenticated && (
                    <p className="h5 text-danger">
                        Si no tienes una cuenta, <span><a href="/login">Inicia Sesión.</a></span>
                    </p>
                )}
            </div>
        </Container>
    );
}
```

### **2. Componente `ProtectedRoute`**

El componente `ProtectedRoute` será el encargado de verificar la autenticación y redirigir a los usuarios no autenticados. Aquí está el código ajustado:

```jsx
// components/ProtectedRoute.jsx
import React from 'react';
import { Route, Navigate } from 'react-router-dom';

const ProtectedRoute = ({ element: Element, ...rest }) => {
    const isAuthenticated = !!localStorage.getItem('userId'); // Verifica si hay un ID de usuario en localStorage
    return (
        <Route
            {...rest}
            element={isAuthenticated ? (
                Element
            ) : (
                <Navigate to="/" replace />
            )}
        />
    );
};

export default ProtectedRoute;
```

### **3. Configurar `App.jsx`**

Ahora, integra el componente `ProtectedRoute` en `App.jsx` para proteger las rutas:

```jsx
// App.jsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Login from './components/Login';
import LandingPage from './components/LandingPage';
import Paises from './components/Paises';
import RazonSocial from './components/RazonSocial';
import Departamento from './components/Departamento';
import Aplicacion from './components/Aplicacion';
import Ambiente from './components/Ambiente';
import CentroCosto from './components/CentroCosto';
import Puesto from './components/Puesto';
import Division from './components/Division';
import Usuario from './components/Usuario';
import MatrizPais from './components/MatrizPais';
import Auditoria from './components/Auditoria';
import RolesyPermisos from './components/RolesyPermisos';
import Stop from './components/Stop';

function App() {
    return (
        <Router>
            <Routes>
                <Route path="/login" element={<Login />} />
                <Route path="/" element={<Stop isAuthenticated={false} user={null} />} /> {/* Página de acceso no permitido */}
                <Route element={<ProtectedRoute element={<LandingPage />} />} path="/landingPage" />
                <Route element={<ProtectedRoute element={<Paises />} />} path="/paises" />
                <Route element={<ProtectedRoute element={<RazonSocial />} />} path="/razonsocial" />
                <Route element={<ProtectedRoute element={<Departamento />} />} path="/departamento" />
                <Route element={<ProtectedRoute element={<Aplicacion />} />} path="/aplicacion" />
                <Route element={<ProtectedRoute element={<Ambiente />} />} path="/ambiente" />
                <Route element={<ProtectedRoute element={<CentroCosto />} />} path="/centrocosto" />
                <Route element={<ProtectedRoute element={<Puesto />} />} path="/puesto" />
                <Route element={<ProtectedRoute element={<Division />} />} path="/division" />
                <Route element={<ProtectedRoute element={<Usuario />} />} path="/usuario" />
                <Route element={<ProtectedRoute element={<MatrizPais />} />} path="/matrizPais" />
                <Route element={<ProtectedRoute element={<Auditoria />} />} path="/auditoria" />
                <Route element={<ProtectedRoute element={<RolesyPermisos />} />} path="/rolespermisos" />
            </Routes>
        </Router>
    );
}

export default App;
```

### **Resumen**

1. **Componente `Stop`**: Muestra un mensaje de acceso denegado sin la imagen.
2. **Componente `ProtectedRoute`**: Protege las rutas verificando si el usuario está autenticado.
3. **`App.jsx`**: Configura las rutas y utiliza `ProtectedRoute` para proteger las páginas específicas.

Con estos cambios, tu aplicación ahora manejará el acceso a las rutas protegidas de manera adecuada. Asegúrate de que `localStorage` esté gestionado correctamente para reflejar el estado de autenticación del usuario.