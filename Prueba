El problema que describes podría deberse a cómo el navegador maneja el enfoque del campo de entrada. Aquí te dejo una solución alternativa que utiliza la referencia del campo de entrada para asegurar que el cursor se mantenga en su lugar mientras editas:

1. **Crea una referencia para el campo de entrada**: Usa `useRef` para mantener una referencia al campo de entrada.

2. **Ajusta la posición del cursor**: Después de actualizar el valor del campo, ajusta la posición del cursor manualmente.

Aquí está el código modificado con los cambios necesarios:

### Modificaciones en el Componente `Paises`

```javascript
import React, { useState, useEffect, useRef } from "react";
// ... (otras importaciones)

function Paises() {
  // ... (otros estados)

  // Ref para el campo de entrada editado
  const inputRef = useRef(null);

  // ... (otros métodos)

  const handleEditChange = (event, field) => {
    const { value, selectionStart } = event.target;

    setEditedRow((prevState) => ({
      ...prevState,
      [field]: value,
    }));

    // Ajusta la posición del cursor
    if (inputRef.current) {
      inputRef.current.selectionStart = selectionStart;
      inputRef.current.selectionEnd = selectionStart;
    }

    validateInput(field, value); // Validación de los campos a editar
  };

  const columns = [
    {
      name: "País",
      selector: (row) => row.id,
      sortable: true,
      minwidth: "200px",
      maxwidth: "50px",
      cell: (row) =>
        editMode && editedRow?.id === row.id ? (
          <StyledInput
            ref={inputRef} // Asigna la referencia aquí
            type="text"
            value={editedRow.N_Pais}
            onChange={(e) => handleEditChange(e, "N_Pais")}
            onKeyPress={(e) => {
              if (!/[a-zA-ZñÑáéíóúÁÉÍÓÚ]/.test(e.key)) {
                e.preventDefault();
              }
            }}
          />
        ) : (
          <div>{row.N_Pais}</div>
        ),
    },
    // ... (otras columnas)
  ];

  // ... (resto del componente)
}

export default Paises;
```

### Explicación:

1. **Referencia del Campo de Entrada**: `const inputRef = useRef(null);` se usa para mantener una referencia al campo de entrada editado.

2. **Ajuste de la Posición del Cursor**: Después de actualizar el valor en `handleEditChange`, se ajusta manualmente la posición del cursor para que se mantenga en el lugar donde estaba antes de realizar la edición.

Asegúrate de probar estos cambios y ajustar la lógica si es necesario para adaptarla a tu aplicación específica.