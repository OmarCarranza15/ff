Para asegurarte de que solo el registro en modo de edición pueda tener sus checkboxes interactuables, necesitas condicionar la habilitación de los checkboxes en función del estado de edición. Aquí te dejo el ajuste necesario:

### 1. **Columnas para `Insertar` y `Editar`**
Ajusta las columnas para que los checkboxes solo sean interactivos cuando el registro está en modo de edición:

```javascript
{
  name: "Insertar",
  selector: (row) => (row.Insertar === 1 ? "Activo" : "Inactivo"),
  cell: (row) =>
    editMode && editedRow?.id === row.id ? (
      <CustomCheckbox
        checked={editedRow.Insertar}
        onChange={(e) => handleEditChange(e, "Insertar")}
      />
    ) : (
      <CustomCheckbox
        checked={row.Insertar === 1}
        disabled={!editMode || editedRow?.id !== row.id}
        onChange={(e) => handleStaticCheckboxChange(e, row.id, "Insertar")}
      />
    ),
},
{
  name: "Editar",
  selector: (row) => (row.Editar === 1 ? "Activo" : "Inactivo"),
  cell: (row) =>
    editMode && editedRow?.id === row.id ? (
      <CustomCheckbox
        checked={editedRow.Editar}
        onChange={(e) => handleEditChange(e, "Editar")}
      />
    ) : (
      <CustomCheckbox
        checked={row.Editar === 1}
        disabled={!editMode || editedRow?.id !== row.id}
        onChange={(e) => handleStaticCheckboxChange(e, row.id, "Editar")}
      />
    ),
}
```

### 2. **CustomCheckbox Componente**
Asegúrate de que el componente `CustomCheckbox` acepte y maneje la propiedad `disabled`:

```javascript
import React from 'react';

const CustomCheckbox = ({ checked, onChange, disabled }) => {
  return (
    <input
      type="checkbox"
      checked={checked}
      onChange={onChange}
      disabled={disabled}
    />
  );
};

export default CustomCheckbox;
```

Este ajuste asegurará que los checkboxes sean deshabilitados para todos los registros excepto el que está actualmente en modo de edición.