import React, { useState, useEffect } from "react";
import styled from "styled-components";
import { ButtonGroup, Button, StyledInput } from "./Estilos.jsx";

const StyledDataTable = styled(DataTable)`
  border-collapse: collapse;
  width: 30%;
  position: relative;
  margin: center;
  margin: 1% 30%;

  th,
  td {
    border: 1px solid #ddd;
    padding: 15px;
    text-align: center;
    white-space: normal;
    word-break: break-word;
    overflow-wrap: break-word;
  }

  th {
    background-color: #f0f0f0;
    text-align: center;
  }

  td {
    min-width: 200px;
    max-width: 500px;
    text-align: center;
  }

  @media (max-width: 768px) {
    th,
    td {
      padding: 8px;
    }
  }

  @media (max-width: 480px) {
    th,
    td {
      padding: 6px;
    }
  }
`;

function Paises() {
  const [editMode, setEditMode] = useState(false);
  const [editedRow, setEditedRow] = useState(null);

  const startEdit = (row) => {
    setEditMode(row.id);
    document.body.classList.add('no-scroll'); // Desactiva el desplazamiento
  };

  const cancelEdit = () => {
    setEditMode(false);
    setEditedRow(null);
    document.body.classList.remove('no-scroll'); // Reactiva el desplazamiento
  };

  const saveChanges = async (id) => {
    // Lógica para guardar cambios
    document.body.classList.remove('no-scroll'); // Reactiva el desplazamiento
  };

  const handleEditChange = (event, field) => {
    const { value } = event.target;
    setEditedRow((prevState) => ({
      ...prevState,
      [field]: value,
    }));
  };

  const columns = [
    {
      name: "N°",
      selector: (row, index) => index + 1,
      sortable: true,
      minWidth: "50px",
      maxWidth: "100px",
    },
    {
      name: "País",
      selector: (row) => row.id,
      sortable: true,
      minWidth: "200px",
      maxWidth: "50px",
      cell: (row) =>
        editMode && editedRow?.id === row.id ? (
          <StyledInput
            type="text"
            value={editedRow.N_Pais}
            onChange={(e) => handleEditChange(e, "N_Pais")}
            onKeyPress={(e) => {
              if (!/[a-zA-ZñÑáéíóúÁÉÍÓÚ]/.test(e.key)) {
                e.preventDefault();
              }
            }}
          />
        ) : (
          <div>{row.N_Pais}</div>
        ),
    },
    {
      name: "Acciones",
      cell: (row) =>
        editMode === row.id ? (
          <ButtonGroup>
            <Button
              type="button"
              className="btn btn-outline-success"
              onClick={() => saveChanges(row.id)}
            >
              Guardar
            </Button>
            <Button
              type="button"
              className="btn btn-outline-danger"
              onClick={cancelEdit}
            >
              Cancelar
            </Button>
          </ButtonGroup>
        ) : (
          <ButtonGroup>
            <Button
              type="button"
              className="btn btn-outline-primary"
              onClick={() => startEdit(row)}
            >
              Editar
            </Button>
            <Button
              type="button"
              className="btn btn-outline-danger"
              onClick={() => {
                if (
                  window.confirm(
                    "¿Estás seguro que deseas eliminar este registro?"
                  )
                ) {
                  deleteRow(row.id);
                }
              }}
            >
              Eliminar
            </Button>
          </ButtonGroup>
        ),
    },
  ];

  return (
    <StyledDataTable
      columns={columns}
      data={rows}
      // Otros props y configuraciones
    />
  );
}

export default Paises;