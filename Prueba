
Para implementar una validación que asegure que se seleccionen los campos "Razón Social", "División", "Departamento" y "Centro de Coste" cuando cambias el país en modo edición, debes realizar los siguientes ajustes:

1. **Validar los Campos**: Asegúrate de que todos los campos requeridos se seleccionen antes de permitir guardar los cambios.

2. **Mostrar Mensaje de Error**: Informa al usuario que debe seleccionar todos los campos requeridos.

Aquí tienes una solución basada en el código que proporcionaste:

### Ajustes Necesarios

1. **Añadir Estado para Validación y Mensaje de Error**

Agrega un estado para gestionar el mensaje de error y la validación.

```javascript
const [validationError, setValidationError] = useState('');
```

2. **Modificar `handleEditChange` para Actualizar el Estado y Validar**

Actualiza `handleEditChange` para manejar la validación al cambiar los campos.

```javascript
const handleEditChange = (e, field) => {
  const { value } = e.target;
  setEditedRow((prev) => ({
    ...prev,
    [field]: value,
  }));

  // Validar si todos los campos están llenos
  if (field === 'ID_Pais') {
    const hasAllFields =
      editedRow.ID_RSocial &&
      editedRow.ID_Division &&
      editedRow.ID_Departamento &&
      editedRow.ID_CentroCostos;
    
    if (!hasAllFields) {
      setValidationError('Por favor, complete todos los campos requeridos.');
    } else {
      setValidationError('');
    }
  }
};
```

3. **Modificar `saveChanges` para Validar Antes de Guardar**

Asegúrate de que la validación se realiza antes de guardar los cambios.

```javascript
const saveChanges = (rowId) => {
  if (validationError) {
    alert(validationError);
    return;
  }

  // Lógica para guardar cambios
};
```

4. **Mostrar Mensaje de Error en la Interfaz de Usuario**

Añade un mensaje de error en la interfaz si hay algún error de validación.

```javascript
{
  name: "Acciones",
  cell: (row) =>
    editMode === row.id ? (
      <ButtonGroup>
        <Button
          type="button"
          className="btn btn-outline-success"
          onClick={() => saveChanges(row.id)}
          disabled={validationError} // Deshabilitar si hay error
        >
          Guardar
        </Button>
        <Button
          type="button"
          className="btn btn-outline-danger"
          onClick={cancelEdit}
        >
          Cancelar
        </Button>
        {validationError && <div style={{ color: 'red' }}>{validationError}</div>}
      </ButtonGroup>
    ) : (
      <ButtonGroup>
        <Button
          type="button"
          className="btn btn-outline-primary"
          onClick={() => startEdit(row)}
        >
          Editar
        </Button>
        <Button
          type="button"
          className="btn btn-outline-danger"
          onClick={() => {
            if (
              window.confirm(
                "¿Estás seguro que deseas eliminar este registro?"
              )
            ) {
              deleteRow(row.id);
            }
          }}
        >
          Eliminar
        </Button>
      </ButtonGroup>
    ),
}
```

5. **Modificar el Renderizado del Selector de País**

Asegúrate de que el cambio de país resetea los campos dependientes y maneja la validación correctamente.

```javascript
{
  name: "Pais",
  selector: (row) => row.N_Pais,
  sortable: true,
  minWidth: "100px",
  maxWidth: "100px",
  cell: (row) =>
    editMode && editedRow?.id === row.id ? (
      <StyledSelect
        value={editedRow.ID_Pais}
        onChange={(e) => {
          handleEditChange(e, "ID_Pais");
          filterOptionsByCountry(e.target.value);
        }}
      >
        {pais.map((pais) => (
          <option key={pais.id} value={pais.id}>
            {pais.N_Pais}
          </option>
        ))}
      </StyledSelect>
    ) : (
      <div>{row.N_Pais}</div>
    ),
}
```

### Explicación:

- **`handleEditChange`**: Maneja el cambio en los campos y valida si todos los campos requeridos están seleccionados cuando se cambia el país.

- **`saveChanges`**: Verifica el error de validación antes de permitir que se guarden los cambios.

- **`validationError`**: Muestra un mensaje de error en la interfaz si falta alguna selección requerida.

Este enfoque asegura que, al cambiar el país en modo edición, el usuario deberá seleccionar "Razón Social", "División", "Departamento" y "Centro de Coste" antes de
