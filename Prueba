const saveChanges = async (id) => {
    if (!editedRow.N_RSocial.trim()) {
        setErrors({ N_RSocial: "El campo Razón Social no puede estar vacío" });
        showNotification("El campo Razón Social no puede estar vacío");
        return;
    }
    
    try {
        const updateRow = {
            ...editedRow,
        };

        // Verificar si la razón social ya existe en la base de datos para el mismo país
        if (editedRow.ID_Pais && editedRow.N_RSocial) {
            const response = await axios.get(`http://localhost:3000/rsocial`);
            console.log("Response:", response.data);

            const rsocialExists = response.data.some((rsocial) => {
                if (rsocial.ID_Pais === parseInt(editedRow.ID_Pais, 10) && rsocial.id !== id) {
                    const editedRazonSocial = editedRow.N_RSocial.toLowerCase();
                    return rsocial.N_RSocial.toLowerCase() === editedRazonSocial;
                }
                return false;
            });

            if (rsocialExists) {
                setErrors({ rsocial: "La razón social ya existe en este país" });

                const errorNotification = document.createElement("div");
                errorNotification.className = "error-notification";
                errorNotification.innerHTML = `
                    <span class="error-icon">!</span>
                    <span class="error-message">
                        La razón social que intenta registrar ya existe en la base de datos para este país.
                        Por favor, ingrese una razón social diferente.
                    </span>
                `;

                document.body.appendChild(errorNotification);

                // Ocultar la notificación después de 2 segundos
                setTimeout(() => {
                    errorNotification.remove();
                }, 2000);
                return;
            }
        } else {
            console.error("Error: editedRow.N_RSocial or editedRow.ID_Pais is undefined or empty");
            setErrors({
                rsocial: "El campo Razón Social o País no puede estar vacío",
            });
            return;
        }

        await axios.put(`http://localhost:3000/rsocial/${id}`, updateRow);

        // Obtener el valor original del campo
        const originalRow = records.find((row) => row.id === id);
        const editedIndex = records.findIndex((row) => row.id === id) + 1;

        // Construir los valores para la auditoría
        const originalCountry = originalRow.N_Pais;
        const originalRSocial = originalRow.N_RSocial;
        const editedCountry = editedRow.N_Pais;
        const editedRSocial = editedRow.N_RSocial;

        const hasCountryChanged = originalCountry !== editedCountry;
        const hasRSocialChanged = originalRSocial !== editedRSocial;

        const auditoriaData = {
            Campo_Original: [
                hasCountryChanged ? `- País: ${originalCountry}` : '',
                hasRSocialChanged ? `- Razón Social: ${originalRSocial}` : ''
            ].filter(Boolean).join('¬ '),
            Campo_Nuevo: [
                hasCountryChanged ? `- País: ${editedCountry}` : '',
                hasRSocialChanged ? `- Razón Social: ${editedRSocial}` : ''
            ].filter(Boolean).join('¬ '),
            Tabla: 'Razones Sociales',
            Accion: 2, // Modificación
            ID_Usuario: userId,
            N: editedIndex
        };

        if (auditoriaData.Campo_Original || auditoriaData.Campo_Nuevo) {
            await axios.post('http://localhost:3000/auditoria', auditoriaData);
        }

        const updatedRecords = records.map((row) =>
            row.id === id ? { ...editedRow } : row
        );

        setRecords(updatedRecords);
        setEditedRow(null);
        setEditMode(null);

        // Notificación de datos actualizados
        const toastElement = document.createElement("div");
        toastElement.className = "toast-notification";
        toastElement.innerHTML = "Razón Social actualizada con éxito!";

        document.body.appendChild(toastElement);

        // Ocultar la notificación después de 1 segundo
        setTimeout(() => {
            toastElement.remove();
            window.location.reload(); // Recargar la página después de 1 segundo
        }, 1000);
    } catch (error) {
        console.error("Error al guardar los cambios", error);
    }
};