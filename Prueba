const handleEditChange = (event, field) => {
    if (field === "Paises") {
      const selectedOptions = Array.from(
        event.target.selectedOptions,
        (option) => option.value
      );
      setEditedRow((prevState) => ({
        ...prevState,
        Paises: selectedOptions,
      }));
    } const { type, checked } = event.target;
    if (type === "checkbox") {
      setEditedRow((prevState) => ({
        ...prevState,
        [field]: checked,
      }));
    } else {
      const { value, type, checked } = event.target;
      let newValue = type === "checkbox" ? checked : value;
      if (field !== "Des_Rol") {
        newValue = String(newValue).toUpperCase();
      }
      setEditedRow((prevState) => ({
        ...prevState,
        [field]: newValue,
      }));
    }
  };
  const handleStaticCheckboxChange = (e, id, field) => {
    const updatedRecords = records.map((row) => {
      if (row.id === id) {
        return {
          ...row,
          [field]: e.target.checked ? 1 : 2,
        };
      }
      return row;
    });

    setRecords(updatedRecords);
  };

  const handleInputClick = (field) => {
    if (editMode) {
      setEditedRow((prevState) => ({
        ...prevState,
        [field]: '',
      }));
    }
  };

  const saveChanges = async (id) => {
    if (!editedRow.N_Rol.trim()) {
      setErrors({ N_Rol: "El campo Roles no puede estar vacío" });
      showNotification("El campo Roles no puede estar vacío");
      return;
    } else if (!editedRow.Des_Rol.trim()) {
      setErrors({ Des_Rol: "El campo Descripcion no puede estar vacío" });
      showNotification("El campo Descripcion no puede estar vacío");
      return;
    }
  
    try {
      // Validar que los campos Rol y descripción no estén vacíos
      if (!editedRow.N_Rol || !editedRow.Des_Rol) {
        setErrors({
          nombre: !editedRow.N_Rol ? "El nombre es requerido." : "",
          usuario: !editedRow.Des_Rol ? "El usuario es requerido." : "",
        });
  
        const errorNotification = document.createElement("div");
        errorNotification.className = "error-notification";
        errorNotification.innerHTML = `
          <span class="error-icon">!</span>
          <span class="error-message">
            No pueden quedar campos vacíos.
          </span>
        `;
  
        document.body.appendChild(errorNotification);
  
        setTimeout(() => {
          errorNotification.remove();
        }, 2000);
        return;
      }
  
      const updateRow = {
        ...editedRow,
        Insertar: editedRow.Insertar ? 1 : 2,
        Editar: editedRow.Editar ? 1 : 2,
        Paises: editedRow.Paises.join(","),
      };
  
      await axios.put(`http://localhost:3000/rolusuario/${id}`, updateRow);
  
      // Obtener el valor original del campo
      const originalRow = records.find((row) => row.id === id);
  
      const editedIndex = records.findIndex((row) => row.id === id) + 1;
  
      // Construir los valores para la auditoría
      const originalRol = originalRow.N_Rol;
      const originalDesRol = originalRow.Des_Rol;
      const originalInsertar = originalRow.Insertar === 1 ? "Habilitado" : "Deshabilitado";
      const originalEditar = originalRow.Editar === 1 ? "Habilitado" : "Deshabilitado";
      const originalPais = Array.isArray(originalRow.Paises) 
          ? originalRow.Paises.join(", ") 
          : originalRow.Paises || '';
  
      const EditedRol = editedRow.N_Rol;
      const editedDesRol = editedRow.Des_Rol;
      const editedInsertar = editedRow.Insertar === 1 ? "Habilitado" : "Deshabilitado";
      const EditedEditar = editedRow.Editar === 1 ? "Habilitado" : "Deshabilitado";
      const EditedPais = editedRow.Paises.map(
        (id) => pais.find((a) => a.id === id)?.N_Pais
      ).join(", ");
  
      const hasRolChanged = originalRol !== EditedRol;
      const hasDesRolChanged = originalDesRol !== editedDesRol;
      const hasInsertarChanged = originalInsertar !== editedInsertar;
      const hasEditarChanged = originalEditar !== EditedEditar;
      const hasPaisChanged = originalPais !== EditedPais;
  
      const auditoriaData = {
        Campo_Original: [
          hasRolChanged ? `- Rol: ${originalRol}` : "",
          hasDesRolChanged ? `- Descripción: ${originalDesRol}` : "",
          hasInsertarChanged ? `- Permiso Insertar: ${originalInsertar}` : "",
          hasEditarChanged ? `- Permiso Editar: ${originalEditar}` : "",
          hasPaisChanged ? `- Paises: ${originalPais}` : "",
        ]
          .filter(Boolean)
          .join("¬ "),
        Campo_Nuevo: [
          hasRolChanged ? `- Rol: ${EditedRol}` : "",
          hasDesRolChanged ? `- Descripción: ${editedDesRol}` : "",
          hasInsertarChanged
            ? `- Permiso Insertar: ${editedInsertar}`
            : "",
          hasEditarChanged
            ? `- Permiso Editar: ${EditedEditar}`
            : "",
          hasPaisChanged ? `- Paises: ${EditedPais}` : "",
        ]
          .filter(Boolean)
          .join("¬ "),
        Tabla: "Roles y Permisos",
        Accion: 2, // Modificación
        ID_Usuario: userId,
        N: editedIndex,
      };
  
      if (auditoriaData.Campo_Original || auditoriaData.Campo_Nuevo) {
        await axios.post("http://localhost:3000/auditoria", auditoriaData);
      }
  
      const updatedRecords = records.map((row) =>
        row.id === id
          ? {
              ...row,
              ...updateRow,
              Paises: updateRow.Paises.split(",").map(
                (id) => pais.find((a) => a.id === Number(id))?.N_Pais
              ),
            }
          : row
      );
  
      setRecords(updatedRecords);
      setEditedRow(null);
      setEditMode(null);
  
      const toastElement = document.createElement("div");
      toastElement.className = "toast-notification";
      toastElement.innerHTML = "¡Usuario actualizado con éxito!";
  
      document.body.appendChild(toastElement);
  
      setTimeout(() => {
        toastElement.remove();
        window.location.reload(); // Recargar la página después de 1 segundo
      }, 1000);
    } catch (error) {
      console.error("Error al guardar los cambios", error);
    }
  };
