 const handleEditChange = (event, field) => {
    const { value } = event.target;
    setEditedRow((prevState) => ({
      ...prevState,
      [field]: value,
      ...(field === "ID_Pais" && {
        N_Pais: pais.find((p) => p.id === parseInt(value)).N_Pais,
      }),
    }));
    validateInput(field, value); // Validación de los campos a editar
  };

  const validateInput = (field, value) => {
    let newErrors = { ...errors };
    if (field === "pais") {
      if (!value.trim()) {
        newErrors.pais = "El campo País es obligatorio";
      } else if (!/^[a-zA-ZÑñ\s]+$/.test(value)) {
        newErrors.pais =
          "El campo País solo acepta letras y espacios en blanco";
      } else {
        newErrors.pais = "";
      }
    }
    setErrors(newErrors);
  };

  const saveChanges = async (id) => {
    try {
      const updateRow = {
        ...editedRow,
      };
  
      // Verificar si el país ya existe
      if (editedRow && editedRow.N_Pais) {
        console.log("Checking if country exists...");
        const response = await axios.get(
          `http://localhost:3000/pais?N_Pais=${editedRow.N_Pais}`
        );
  
        console.log("Response:", response.data);
  
        if (
          response.data.some(
            (pais) =>
              pais.N_Pais.toLowerCase() === editedRow.N_Pais.toLowerCase()
          )
        ) {
          const errorNotification = document.createElement("div");
          errorNotification.className = "error-notification";
          errorNotification.innerHTML = `
            <span class="error-icon">!</span>
            <span class="error-message">
              El País que intenta actualizar ya existe en la base de datos.
              Por favor, ingrese una país diferente.
            </span>
          `;
          document.body.appendChild(errorNotification);
  
          // Ocultar la notificación después de 2 segundos
          setTimeout(() => {
            errorNotification.remove();
          }, 2000);
          return;
        }
      } else {
        setErrors({ N_Pais: "El campo país no puede estar vacío" });
        return;
      }
  
      // Revisar si el pais ya existe en la base de datos
      const existingCountry = records.find(
        (row) => row.N_Pais.toLowerCase() === editedRow.N_Pais.toLowerCase()
      );
  
      if (existingCountry && existingCountry.id !== id) {
        setErrors({ N_Pais: "El país ya está registrado" });
        return;
      }
  
      // Obtener el valor original del campo
      const originalRow = records.find((row) => row.id === id);
  
      await axios.put(`http://localhost:3000/pais/${id}`, updateRow);
  
      // Obtener el índice del país editado
      const editedIndex = records.findIndex((row) => row.id === id) + 1;
  
      // Guardar el campo original y el campo nuevo en la auditoría
      const auditoriaData = {
        Campo_Original: `- País: ${originalRow.N_Pais}`,
        Campo_Nuevo: `- País: ${editedRow.N_Pais}`,
        Tabla: 'Paises',
        Accion: 2,
        ID_Usuario: userId,
        N: editedIndex
      };
  
      await axios.post('http://localhost:3000/auditoria', auditoriaData);
  
      const updatedRecords = records.map((row) =>
        row.id === id ? { ...editedRow } : row
      );
  
      setRecords(updatedRecords);
      setEditedRow(null);
      setEditMode(null);
  
      // Notificación de datos actualizados
      const toastElement = document.createElement("div");
      toastElement.className = "toast-notification";
      toastElement.innerHTML = "País actualizado con éxito!";
  
      document.body.appendChild(toastElement);
  
      // Ocultar la notificación después de 1 segundo
      setTimeout(() => {
        toastElement.remove();
        window.location.reload(); // Recargar la página después de 1 segundo
      }, 1000);
    } catch (error) {
      console.error("Error al guardar los cambios", error);
    }
  };

  const cancelEdit = () => {
    setEditedRow(null);
    setEditMode(null);
  };

  const filteredData = records.filter((row) => {
    return (
      filters.N_Pais === "" ||
      row.N_Pais.toLowerCase().includes(filters.N_Pais.toLowerCase())
    );
  });

  const deleteRow = (id) => {
    axios
      .get(`/Datosdependientes/${id}`)
      .then((response) => {
        if (response.data.hasDependencies) {
          alert(
            "No se puede eliminar este registro porque tiene dependencias en otros registros."
          );
        } else {
          axios
            .delete(`/delete/${id}`)
            .then((response) => {
              // Actualiza la lista de filas después de eliminar una fila
              setRows(rows.filter((row) => row.id !== id));
            })
            .catch((error) => console.error(error));
        }
      })
      .catch((error) => console.error(error));
  };

  const columns = [
    {
      name: "N°",
      selector: (row, index) => (currentPage - 1) * rowsPerPage + index + 1,
      sortable: true,
      minWidth: "50px",
      maxWidth: "100px",
    },
    {
      name: "País",
      selector: (row) => row.id,
      sortable: true,
      minwidth: "200px", // Ajusta el tamaño mínimo según sea necesario
      maxwidth: "50px", // Ajusta el tamaño máximo según sea necesario
      cell: (row) =>
        editMode && editedRow?.id === row.id ? (
          <StyledInput
            type="text"
            value={editedRow.N_Pais}
            onChange={(e) => handleEditChange(e, "N_Pais")}
            onKeyPress={(e) => {
              if (!/[a-zA-ZñÑáéíóúÁÉÍÓÚ]/.test(e.key)) {
                e.preventDefault();
              }
            }}
          />
        ) : (
          <div>{row.N_Pais}</div>
        ),
    },
    {
      name: "Acciones",
      cell: (row) =>
        editMode === row.id ? (
          <ButtonGroup>
            <Button
              type="button"
              className="btn btn-outline-success"
              onClick={() => saveChanges(row.id)}
            >
              Guardar
            </Button>
            <Button
              type="button"
              className="btn btn-outline-danger"
              onClick={cancelEdit}
            >
              Cancelar
            </Button>
          </ButtonGroup>
        ) : (
          <ButtonGroup>
            <Button
              type="button"
              className="btn btn-outline-primary"
              onClick={() => startEdit(row)}
            >
              Editar
            </Button>
            <Button
              type="button"
              className="btn btn-outline-danger"
              onClick={() => {
                if (
                  window.confirm(
                    "¿Estás seguro que deseas eliminar este registro?"
                  )
                ) {
                  deleteRow(row.id);
                }
              }}
            >
              Eliminar
            </Button>
          </ButtonGroup>
        ),
    },
  ];

  const resetFilters = () => {
    setFilters({
      N_Pais: "",
    });
  };

  return (
    <MainContainer>
      <TopBar />
      <ContentContainer>
        <Sidebar />
        <DataTableContainer>
          <HeaderContainer>
            <Title>Paises</Title>
            <ButtonGroup>
              <Button
                className="btn btn-outline-primary"
                onClick={toggleFilters}
              >
                <FaSearch style={{margin: "0px 5px"}}/>
                {showFilters ? "Ocultar" : "Buscar"}
              </Button>
              <Button
                style={{marginRight: "30px"}}
                className="btn btn-outline-success"
                onClick={handleInsert}
              >
                <FaPlus style={{margin: "0px 5px"}}/>
                Nuevo Pais
              </Button>
            </ButtonGroup>
          </HeaderContainer>
          <FilterWrapper show={showFilters}>
            <FilterInput
              type="text"
              value={filters.N_Pais}
              onChange={(e) => handleFilterChange(e, "N_Pais")}
              placeholder="Buscar por Pais"
            />
            <ButtonGroup>
              <RedButton onClick={resetFilters}>
                <FaUndo /> Resetear Filtros
              </RedButton>
            </ButtonGroup>
          </FilterWrapper>
          {loading ? (
            <CustomLoader />
          ) : (
            <StyledDataTable
            columns={columns}
            data={filteredData}
            customStyles={customStyles}
            pagination
            paginationPerPage={15} // Fija la cantidad de filas por página en 15
            onChangePage={page => setCurrentPage(page)}
            paginationComponentOptions={{
              rowsPerPageText: "", // Oculta el texto de "Filas por página"
              rangeSeparatorText: "de",
              noRowsPerPage: true, // Oculta la opción de seleccionar filas por página
              selectAllRowsItem: false,
            }}
            />
          )}
        </DataTableContainer>
      </ContentContainer>
      {/* Modal para insertar nuevo país */}
      {showModal && (
        <ModalBackground>
          <ModalWrapper>
            <ModalTitle>Insertar Nuevo País</ModalTitle>

            <div style={{ margin: "15px" }} />
            <label
              style={{ width: "100%", display: "block", textAlign: "left" }}
            >
              <span style={{ textAlign: "left" }}>Nombre del País:</span>
            </label>
            <input
              className="form-control"
              type="text"
              value={modalValues.pais}
              onInput={(e) => {
                const value = e.target.value;
                const newValue = value.toLowerCase().replace(/(^\w|\s\w)/g, (match) => match.toUpperCase());
                e.target.value = newValue;
                handleModalChange(e, "pais");
              }}
              placeholder="Ingrese el nombre"
              error={errors.pais}
              pattern="[a-zA-ZÑñ\s]+"
              required
            />
            {errors.pais && <ErrorMessage>{errors.pais}</ErrorMessage>}
            <div style={{ margin: "15px" }} />

            <ModalButtonGroup>
              <button
                type="button"
                class="btn btn-success"
                style={{ fontSize: "14px", padding: "10px 10px" }}
                onClick={SaveModal}
              >
                Guardar
              </button>
              <button
                type="button"
                class="btn btn-secondary"
                cancel
                onClick={handleCloseModal}
              >
                Cancelar
              </button>
            </ModalButtonGroup>
          </ModalWrapper>
        </ModalBackground>
      )}
    </MainContainer>
  );
}
