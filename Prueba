const handleModalChange = (e, fieldName) => {
    const value = e.target.value;

    // Actualizar el valor del campo en modalValues
    setModalValues((prevModalValues) => ({
      ...prevModalValues,
      [fieldName]: value,
    }));

    // Encontrar la aplicación seleccionada en la lista de aplicaciones
    const selectedApplication = aplicacion.find(
      (app) => app.id === parseInt(value)
    ); // Asegúrate de convertir a entero si es necesario

    // Verificar si la aplicación seleccionada es T24
    const isT24 = selectedApplication
      ? selectedApplication.N_Aplicaciones === "T24"
      : false;

    // Actualizar el estado T24
    setT24(isT24);

    // Log para verificar en consola la aplicación seleccionada
    //console.log('Aplicación seleccionada:', selectedApplication);
  };


{/* Modal para insertar una nuevo departamento */}
      {showModal && (
        <ModalBackground>
          <ModalWrapper>
            <ModalTitle>Nuevo Perfil {selectedCountry}</ModalTitle>
            <div style={{ margin: "15px" }} />
            <label
              style={{ width: "100%", display: "block", textAlign: "left" }}
            >
              <span style={{ textAlign: "left" }}>Puesto:</span>
            </label>
            <select
              class="form-select"
              aria-label="Default select example"
              value={modalValues.ID_Puesto}
              onChange={(e) => handleModalChange(e, "ID_Puesto")}
              error={errors.puesto}
              required
            >
              <option value="">Seleccione un puesto</option>
              {puestos.map((p) => (
                <option key={p.id} value={p.id}>
                  {p.N_Puesto}
                </option>
              ))}
            </select>
            {errors.puesto && <ErrorMessage>{errors.puesto}</ErrorMessage>}

            <div style={{ margin: "15px" }} />
            <label
              style={{ width: "100%", display: "block", textAlign: "left" }}
            >
              <span style={{ textAlign: "left" }}>Aplicación:</span>
            </label>
            <select
              class="form-select"
              aria-label="Default select example"
              value={modalValues.ID_Aplicaciones}
              onChange={(e) => handleModalChange(e, "ID_Aplicaciones")}
              error={errors.aplicacion}
              required
            >
              <option value="">Seleccione una aplicación</option>
              {aplicacion.map((p) => (
                <option key={p.id} value={p.id}>
                  {p.N_Aplicaciones}
                </option>
              ))}
            </select>
            {errors.aplicacion && (
              <ErrorMessage>{errors.aplicacion}</ErrorMessage>
            )}
            <div style={{ margin: "15px" }} />
            {T24 && (
              <div>
                <label
                  style={{
                    width: "100%",
                    display: "block",
                    textAlign: "left",
                  }}
                >
                  Número de Menú:
                </label>
                <input
                  class="form-control"
                  type="text"
                  value={modalValues.Cod_Menu}
                  onChange={(e) => handleModalChange(e, "Cod_Menu")}
                  placeholder="Ingrese el número de menu"
                  {...(errors.Cod_Menu && { className: "is-invalid" })}
                  required
                />
              </div>
            )}
            <div style={{ margin: "15px" }} />

            <label
              style={{ width: "100%", display: "block", textAlign: "left" }}
            >
              <span style={{ textAlign: "left" }}>Rol en la Aplicación:</span>
            </label>
            <input
              class="form-control"
              type="text"
              value={modalValues.Rol}
              onChange={(e) => handleModalChange(e, "Rol")}
              placeholder="Ingrese el Rol"
              error={errors.Rol}
              required
            />
            {errors.Rol && <ErrorMessage>{errors.Rol}</ErrorMessage>}
            <div style={{ margin: "15px" }} />

            <label
              style={{ width: "100%", display: "block", textAlign: "left" }}
            >
              <span style={{ textAlign: "left" }}>
                Puesto del Jefe Inmediato:
              </span>
            </label>
            <input
              class="form-control"
              type="text"
              value={modalValues.Puesto_Jefe}
              onChange={(e) => handleModalChange(e, "Puesto_Jefe")}
              placeholder="Ingrese el Puesto del Jefe"
              error={errors.Puesto_Jefe}
              required
            />
            {errors.Puesto_Jefe && (
              <ErrorMessage>{errors.Puesto_Jefe}</ErrorMessage>
            )}
            {errors.PerError && <ErrorMessage>{errors.PerError}</ErrorMessage>}
            <div style={{ margin: "15px" }} />

            <label
              style={{ width: "100%", display: "block", textAlign: "left" }}
            >
              <span style={{ textAlign: "left" }}>Número de Ticket:</span>
            </label>
            <input
              class="form-control"
              type="text"
              value={modalValues.Ticket}
              onChange={(e) => handleModalChange(e, "Ticket")}
              placeholder="Ingrese el número de ticket"
              onKeyPress={(e) => {
                if (!/\d/.test(e.key)) {
                  e.preventDefault();
                }
              }}
              error={errors.Ticket}
              required
            />
            {errors.Ticket && <ErrorMessage>{errors.Ticket}</ErrorMessage>}
            <div style={{ margin: "15px" }} />

            <label
              style={{ width: "100%", display: "block", textAlign: "left" }}
            >
              <span style={{ textAlign: "left" }}>Observaciones:</span>
            </label>
            <input
              class="form-control"
              type="text"
              value={modalValues.Observaciones}
              onChange={(e) => handleModalChange(e, "Observaciones")}
              placeholder=""
              error={errors.Observaciones}
              required
            />
            {errors.Observaciones && (
              <ErrorMessage>{errors.Observaciones}</ErrorMessage>
            )}
            <div style={{ margin: "15px" }} />
            <ModalButtonGroup>
              <button
                type="button"
                class="btn btn-success"
                style={{ fontSize: "14px", padding: "10px 10px" }}
                onClick={SaveModal}
              >
                Guardar
              </button>
              <button
                type="button"
                class="btn btn-secondary"
                cancel
                onClick={handleCloseModal}
              >
                Cancelar
              </button>
            </ModalButtonGroup>
          </ModalWrapper>
        </ModalBackground>
      )}
