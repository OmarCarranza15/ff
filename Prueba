const startEdit = (row) => {
  setEditedRow({ ...row });
  setEditMode(row.id);

  // Filtrar razón social según el país seleccionado
  const filteredRsocial = rsocial.filter((item) => item.ID_Pais === row.ID_Pais);
  setFilteredRsocial(filteredRsocial);

  // Filtrar división según el país seleccionado
  const filteredDivision = division.filter((item) => item.ID_Pais === row.ID_Pais);
  setFilteredDivision(filteredDivision);

  // Filtrar departamento según el país seleccionado
  const filteredDepartamento = departamento.filter((item) => item.ID_Pais === row.ID_Pais);
  setFilteredDepartamento(filteredDepartamento);

  // Filtrar centro de costos según el país seleccionado
  const filteredCentroCosto = centrocosto.filter((item) => item.ID_Pais === row.ID_Pais);
  setFilteredCentroCosto(filteredCentroCosto);
};

const handleEditChange = (event, field) => {
  const { value } = event.target;
  setEditedRow((prevState) => ({
    ...prevState,
    [field]: value,
    ...(field === "ID_Pais" && { N_Pais: pais.find((p) => p.id === parseInt(value)).N_Pais }),
    ...(field === "ID_Puesto" && { N_Puesto: puesto.find((p) => p.id === parseInt(value)).N_Puesto }),
    ...(field === "ID_Puesto" && { Codigo: puesto.find((p) => p.id === parseInt(value)).Codigo }),
    ...(field === "ID_RSocial" && { N_RSocial: filteredRsocial.find((p) => p.id === parseInt(value)).N_RSocial }),
    ...(field === "ID_Division" && { N_Division: filteredDivision.find((p) => p.id === parseInt(value)).N_Division }),
    ...(field === "ID_Departamento" && { N_Departamento: filteredDepartamento.find((p) => p.id === parseInt(value)).N_Departamento }),
    ...(field === "ID_CentroCostos" && { Nombre: filteredCentroCosto.find((p) => p.id === parseInt(value)).Nombre }),
  }));
  validateInput(field, value);
};