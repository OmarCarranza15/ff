const saveChanges = async (id) => {
  if (!editedRow.Codigo.trim()) {
    setErrors({ Codigo: "El campo Código no puede estar vacío" });
    showNotification("El campo Código no puede estar vacío");
    return;
  } else if (!editedRow.N_Puesto.trim()) {
    setErrors({ N_Puesto: "El campo Puesto no puede estar vacío" });
    showNotification("El campo Puesto no puede estar vacío");
    return;
  }

  try {
    const updateRow = { ...editedRow };

    // Validación de existencia de puesto
    const response = await axios.get(`http://localhost:3000/puesto`);
    const puestoExists = response.data.some((puesto) => {
      if (puesto.ID_Pais === parseInt(editedRow.ID_Pais) && puesto.id !== id) {
        return (
          puesto.N_Puesto.toLowerCase() === editedRow.N_Puesto.toLowerCase() &&
          puesto.Codigo.toString() === editedRow.Codigo.toString()
        );
      }
      return false;
    });

    if (puestoExists) {
      setErrors({ puesto: "El puesto ya existe." });
      showNotification("El Puesto que intenta registrar ya existe en la base de datos para este país.");
      return;
    }

    await axios.put(`http://localhost:3000/puesto/${id}`, updateRow);

    // Actualización de registros
    const updatedRecords = records.map((row) =>
      row.id === id ? { ...editedRow } : row
    );
    setRecords(updatedRecords);
    setEditedRow(null);
    setEditMode(null);

    // Notificación de datos actualizados
    showNotification("¡División actualizada con éxito!");
  } catch (error) {
    console.error("Error al guardar los cambios", error);
  }
};