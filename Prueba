const saveChanges = async (id) => {
  try {
    // No hacer nada si el estado es "Nuevo"
    const currentRow = records.find((row) => row.id === id);
    if (currentRow.Estado === "Nuevo") {
      return; // Evitar la actualización
    }

    // Actualizar el estado normalmente si no es "Nuevo"
    const updateRow = {
      ...editedRow,
      Estado:
        editedRow.Estado === "Nuevo"
          ? 1
          : editedRow.Estado === "En Servicio"
          ? 2
          : editedRow.Estado === "Expirado"
          ? 3
          : currentRow.Estado,
    };

    // Resto del código...
  } catch (error) {
    console.error("Error al guardar los cambios", error);
  }
};

// En la definición de columnas
{
  name: "Estado",
  minWidth: "120px",
  maxWidth: "120px",
  selector: (row) =>
    editMode === row.id ? (
      row.Estado === "Nuevo" ? (
        <div>{row.Estado}</div> // Mostrar texto si el estado es "Nuevo"
      ) : (
        <StyledSelect
          value={editedRow.Estado}
          onChange={(e) => handleEditChange(e, "Estado")}
        >
          <option value={"En Servicio"}>En Servicio</option>
          <option value={"Expirado"}>Expirado</option>
        </StyledSelect>
      )
    ) : (
      <div>{row.Estado}</div>
    ),
  sortable: true,
}