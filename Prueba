Para agregar validación en la edición del país similar a la validación en el modal de inserción, necesitas hacer algunos cambios en la función `saveChanges`. Asegúrate de verificar si el país editado ya existe antes de proceder con la actualización. Aquí tienes el código modificado para lograr eso:

1. **Añade una validación similar a la de inserción en `saveChanges`**:
    - Verifica si el país ya existe en la base de datos antes de permitir la actualización.

```javascript
const saveChanges = async (id) => {
  if (!editedRow.N_Pais.trim()) {
    setErrors({ N_Pais: "El campo País no puede estar vacío" });
    showNotification("El campo País no puede estar vacío");
    return;
  }

  try {
    // Verificar si el país editado ya existe en la base de datos
    const response = await axios.get(`http://localhost:3000/pais?N_Pais=${editedRow.N_Pais}`);
    
    if (response.data.some(pais => pais.N_Pais.toLowerCase() === editedRow.N_Pais.toLowerCase() && pais.id !== id)) {
      const errorNotification = document.createElement("div");
      errorNotification.className = "error-notification";
      errorNotification.innerHTML = `
        <span class="error-icon">!</span>
        <span class="error-message">
          El País que intenta actualizar ya existe en la base de datos.
          Por favor, ingrese un país diferente.
        </span>
      `;
      document.body.appendChild(errorNotification);
      
      setTimeout(() => {
        errorNotification.remove();
      }, 2000);
      return;
    }

    const originalRow = records.find(row => row.id === id);

    await axios.put(`http://localhost:3000/pais/${id}`, editedRow);

    const editedIndex = records.findIndex(row => row.id === id) + 1;

    const auditoriaData = {
      Campo_Original: `- País: ${originalRow.N_Pais}`,
      Campo_Nuevo: `- País: ${editedRow.N_Pais}`,
      Tabla: 'Paises',
      Accion: 2,
      ID_Usuario: userId,
      N: editedIndex
    };

    await axios.post('http://localhost:3000/auditoria', auditoriaData);

    const updatedRecords = records.map(row =>
      row.id === id ? { ...editedRow } : row
    );

    setRecords(updatedRecords);
    setEditedRow(null);
    setEditMode(null);

    const toastElement = document.createElement("div");
    toastElement.className = "toast-notification";
    toastElement.innerHTML = "País actualizado con éxito!";
    document.body.appendChild(toastElement);

    setTimeout(() => {
      toastElement.remove();
      window.location.reload();
    }, 1000);
  } catch (error) {
    console.error("Error al guardar los cambios", error);
  }
};
```

2. **Agrega notificaciones para los errores en la función `validateInput` si no está haciendo la validación ya**:

```javascript
const validateInput = (field, value) => {
  let newErrors = { ...errors };
  if (field === "N_Pais") {
    if (!value.trim()) {
      newErrors.N_Pais = "El campo País es obligatorio";
      showNotification(newErrors.N_Pais);
    } else if (!/^[a-zA-ZÑñ\s]+$/.test(value)) {
      newErrors.N_Pais = "El campo País solo acepta letras y espacios en blanco";
      showNotification(newErrors.N_Pais);
    } else {
      newErrors.N_Pais = "";
    }
  }
  setErrors(newErrors);
};
```

Este código se asegura de que cuando un usuario intenta editar un país, la aplicación verifica si el país ya existe (y no es el mismo que el actual). Si el país ya existe, se muestra una notificación de error y se previene la actualización.