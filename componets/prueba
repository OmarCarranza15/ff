{showModal && (
  <ModalBackground>
    <ModalWrapper>
      <ModalTitle>Nueva Aplicación</ModalTitle>
      <SelectPais
        value={modalValues.ID_Pais}
        onChange={(e) => handleModalChange(e, "ID_Pais")}
        error={errors.pais}
        required
      >
        <option value="">Seleccione un país</option>
        {pais.map((p) => (
          <option key={p.id} value={p.id}>
            {p.N_Pais}
          </option>
        ))}
      </SelectPais>
      {errors.pais && <ErrorMessage>{errors.pais}</ErrorMessage>}
      
      <Select
        isMulti
        value={modalValues.Ambientes.map((id) => ({
          value: id,
          label: ambiente.find((a) => a.id === id)?.N_Ambiente,
        }))}
        options={ambiente.map((a) => ({
          value: a.id,
          label: a.N_Ambiente,
        }))}
        onChange={(selectedOptions) => {
          const selectedValues = selectedOptions.map(option => option.value);
          setModalValues((prevValues) => ({
            ...prevValues,
            Ambientes: selectedValues,
          }));
        }}
        placeholder="Selecciona Ambientes"
      />
      {errors.ambientes && <ErrorMessage>{errors.ambientes}</ErrorMessage>}

      <ModalInput
        type="text"
        value={modalValues.aplicacion}
        onChange={(e) => handleModalChange(e, "aplicacion")}
        placeholder="Aplicacion"
        error={errors.aplicacion}
        required
      />
      {errors.aplicacion && (
        <ErrorMessage>{errors.aplicacion}</ErrorMessage>
      )}
      <ModalButtonGroup>
        <GuardarButton onClick={SaveModal}>
          <FaSave /> Guardar
        </GuardarButton>
        <ModalButton cancel onClick={handleCloseModal}>
          <FaTimes /> Cancelar
        </ModalButton>
      </ModalButtonGroup>
    </ModalWrapper>
  </ModalBackground>
)}