Si al seleccionar un país no se actualizan las listas dependientes, puede haber varios factores en juego, como problemas en la configuración del `useEffect`, en la llamada a las APIs, o en la forma en que los datos se manejan en el estado. A continuación, vamos a abordar el problema paso a paso para asegurarnos de que todas las partes están configuradas correctamente.

### Revisar el Efecto de `useEffect` y la Lógica de Estado

Vamos a desglosar y simplificar el código para verificar cada parte del proceso de selección y actualización de datos.

1. **Verificar el `useEffect` para actualizar listas dependientes:**
   - Este `useEffect` debería ejecutarse cuando `modalValues.ID_Pais` cambie.

2. **Verificar las Funciones de Fetch:**
   - Asegúrate de que cada función fetch esté correctamente definida y de que las URLs sean correctas.

3. **Verificar el Estado del Modal:**
   - Asegúrate de que `modalValues` se actualice correctamente al cambiar el valor del país.

Aquí tienes un ejemplo simplificado del código con verificaciones de consola para ayudarte a depurar:

```jsx
useEffect(() => {
  const fetchData = async () => {
    setLoading(true);
    try {
      const response = await axios.get(`http://localhost:3000/puesto/`);
      const data = response.data;
      const mappedData = await Promise.all(
        data.map(async (puesto) => {
          const paisResponse = await axios.get(`http://localhost:3000/pais/${puesto.ID_Pais}`); 
          const rsocialResponse = await axios.get(`http://localhost:3000/rsocial/${puesto.ID_RSocial}`); 
          const divisionResponse = await axios.get(`http://localhost:3000/division/${puesto.ID_Division}`); 
          const departamentoResponse = await axios.get(`http://localhost:3000/departamento/${puesto.ID_Departamento}`); 
          const centrocostoResponse = await axios.get(`http://localhost:3000/centrocosto/${puesto.ID_CentroCostos}`); 
          
          return {
            id: puesto.id,   
            N_Puesto: puesto.N_Puesto,
            Codigo: puesto.Codigo,
            ID_Pais: puesto.ID_Pais,
            N_Pais: paisResponse.data.N_Pais,
            ID_RSocial: puesto.ID_RSocial,
            N_RSocial: rsocialResponse.data.N_RSocial,
            ID_Division: puesto.ID_Division,
            N_Division: divisionResponse.data.N_Division,
            ID_Departamento: puesto.ID_Departamento,
            N_Departamento: departamentoResponse.data.N_Departamento,
            ID_CentroCostos: puesto.ID_CentroCostos,
            Nombre: centrocostoResponse.data.Nombre,
          }
        })
      )
      setRecords(mappedData);
      setLoading(false);
    } catch (error) {
      console.error('Error al obtener los Puestos:', error);
      setLoading(false);
    }
  };
  
  const fetchPais = async () => {
    try {
      const response = await axios.get(`http://localhost:3000/pais/`);
      setPais(response.data);
    } catch (error) {
      console.error('Error al obtener la lista de Paises', error);
    }
  };

  fetchData();
  fetchPais();
}, []);

useEffect(() => {
  if (modalValues.ID_Pais) {
    console.log('ID_Pais changed:', modalValues.ID_Pais); // Verificación
    fetchRsocial(modalValues.ID_Pais);
    fetchDivision(modalValues.ID_Pais);
    fetchDepartamento(modalValues.ID_Pais);
    fetchCentrocostos(modalValues.ID_Pais);
  }
}, [modalValues.ID_Pais]);

const fetchRsocial = async (paisId) => {
  try {
    console.log('Fetching RSocial for paisId:', paisId); // Verificación
    const response = await axios.get(`http://localhost:3000/rsocial/pais/${paisId}`);
    console.log('RSocial data:', response.data); // Verificación
    setRsocial(response.data);
  } catch (error) {
    console.error('Error al obtener la lista de razón social', error);
  }
};

const fetchDivision = async (paisId) => {
  try {
    console.log('Fetching Division for paisId:', paisId); // Verificación
    const response = await axios.get(`http://localhost:3000/division/pais/${paisId}`);
    console.log('Division data:', response.data); // Verificación
    setDivision(response.data);
  } catch (error) {
    console.error('Error al obtener la lista de división', error);
  }
};

const fetchDepartamento = async (paisId) => {
  try {
    console.log('Fetching Departamento for paisId:', paisId); // Verificación
    const response = await axios.get(`http://localhost:3000/departamento/pais/${paisId}`);
    console.log('Departamento data:', response.data); // Verificación
    setDepartamento(response.data);
  } catch (error) {
    console.error('Error al obtener la lista de departamentos', error);
  }
};

const fetchCentrocostos = async (paisId) => {
  try {
    console.log('Fetching CentroCostos for paisId:', paisId); // Verificación
    const response = await axios.get(`http://localhost:3000/centrocosto/pais/${paisId}`);
    console.log('CentroCostos data:', response.data); // Verificación
    setCentrocostos(response.data);
  } catch (error) {
    console.error('Error al obtener la lista de centro de costos', error);
  }
};

const handleModalChange = (event, field) => {
  const { value } = event.target;
  setModalValues((prevValues) => ({ ...prevValues, [field]: value }));

  if (field === "ID_Pais") {
    setRsocial([]);
    setDivision([]);
    setDepartamento([]);
    setCentrocostos([]);
  }
};
```

### Pasos para Depuración:

1. **Verifica las Consolas**:
   - Revisa las salidas de consola para asegurarte de que las funciones se están llamando y que los datos se están recibiendo correctamente.

2. **Asegúrate de que las Rutas de las APIs son Correctas**:
   - Verifica que las URLs en las llamadas a `axios.get` sean correctas y estén retornando los datos esperados.

3. **Verifica el Estado del Modal**:
   - Asegúrate de que el estado de `modalValues` se está actualizando correctamente cuando cambias el país.

4. **Verifica los Selectores en el Modal**:
   - Asegúrate de que los selectores para `rsocial`, `division`, `departamento` y `centrocostos` están vinculados correctamente al estado y que se están actualizando cuando cambian los valores.

Realiza estos pasos y verifica si las listas dependientes se actualizan correctamente. Si hay algún error específico en las llamadas a la API o en el manejo del estado, las salidas de consola te ayudarán a identificar el problema.