Parece que el problema podría estar en la forma en que se actualizan las listas dependientes (`rsocial`, `division`, `departamento`, `centrocostos`) al seleccionar un país. Vamos a revisar y ajustar la lógica para asegurarnos de que las listas se actualicen correctamente.

### Pasos a seguir:

1. **Revisar el efecto `useEffect` para actualizar las listas dependientes**:
    - Cuando se selecciona un país (`modalValues.ID_Pais`), se deben hacer llamadas a la API para obtener las listas correspondientes a ese país y actualizar el estado.

2. **Asegurarse de que los valores de `modalValues` y `editedRow` se actualicen correctamente**:
    - Al seleccionar un país, se deben limpiar las listas dependientes y hacer las llamadas API necesarias.

Aquí tienes el código ajustado:

```jsx
useEffect(() => {
  const fetchData = async () => {
    setLoading(true);
    try {
      const response = await axios.get(`http://localhost:3000/puesto/`);
      const data = response.data;
      const mappedData = await Promise.all(
        data.map(async (puesto) => {
          const paisResponse = await axios.get(`http://localhost:3000/pais/${puesto.ID_Pais}`); 
          const rsocialResponse = await axios.get(`http://localhost:3000/rsocial/${puesto.ID_RSocial}`); 
          const divisionResponse = await axios.get(`http://localhost:3000/division/${puesto.ID_Division}`); 
          const departamentoResponse = await axios.get(`http://localhost:3000/departamento/${puesto.ID_Departamento}`); 
          const centrocostoResponse = await axios.get(`http://localhost:3000/centrocosto/${puesto.ID_CentroCostos}`); 
          
          return {
            id: puesto.id,   
            N_Puesto: puesto.N_Puesto,
            Codigo: puesto.Codigo,
            ID_Pais: puesto.ID_Pais,
            N_Pais: paisResponse.data.N_Pais,
            ID_RSocial: puesto.ID_RSocial,
            N_RSocial: rsocialResponse.data.N_RSocial,
            ID_Division: puesto.ID_Division,
            N_Division: divisionResponse.data.N_Division,
            ID_Departamento: puesto.ID_Departamento,
            N_Departamento: departamentoResponse.data.N_Departamento,
            ID_CentroCostos: puesto.ID_CentroCostos,
            Nombre: centrocostoResponse.data.Nombre,
          }
        })
      )
      setRecords(mappedData);
      setLoading(false);
    } catch (error) {
      console.error('Error al obtener los Puestos:', error);
      setLoading(false);
    }
  };
  
  const fetchPais = async () => {
    try {
      const response = await axios.get(`http://localhost:3000/pais/`);
      setPais(response.data);
    } catch (error) {
      console.error('Error al obtener la lista de Paises', error);
    }
  };

  fetchData();
  fetchPais();
}, []);

useEffect(() => {
  if (modalValues.ID_Pais) {
    fetchRsocial(modalValues.ID_Pais);
    fetchDivision(modalValues.ID_Pais);
    fetchDepartamento(modalValues.ID_Pais);
    fetchCentrocostos(modalValues.ID_Pais);
  }
}, [modalValues.ID_Pais]);

const fetchRsocial = async (paisId) => {
  try {
    const response = await axios.get(`http://localhost:3000/rsocial/pais/${paisId}`);
    setRsocial(response.data);
  } catch (error) {
    console.error('Error al obtener la lista de razón social', error);
  }
};

const fetchDivision = async (paisId) => {
  try {
    const response = await axios.get(`http://localhost:3000/division/pais/${paisId}`);
    setDivision(response.data);
  } catch (error) {
    console.error('Error al obtener la lista de división', error);
  }
};

const fetchDepartamento = async (paisId) => {
  try {
    const response = await axios.get(`http://localhost:3000/departamento/pais/${paisId}`);
    setDepartamento(response.data);
  } catch (error) {
    console.error('Error al obtener la lista de departamentos', error);
  }
};

const fetchCentrocostos = async (paisId) => {
  try {
    const response = await axios.get(`http://localhost:3000/centrocosto/pais/${paisId}`);
    setCentrocostos(response.data);
  } catch (error) {
    console.error('Error al obtener la lista de centro de costos', error);
  }
};

const handleModalChange = (event, field) => {
  const { value } = event.target;
  setModalValues((prevValues) => ({ ...prevValues, [field]: value }));

  if (field === "ID_Pais") {
    setRsocial([]);
    setDivision([]);
    setDepartamento([]);
    setCentrocostos([]);
  }
};
```

### Verificaciones adicionales:
1. **Verifica las llamadas a la API**:
    - Asegúrate de que las rutas de las API sean correctas y estén retornando los datos esperados.

2. **Verifica los datos recibidos**:
    - Asegúrate de que `setRsocial`, `setDivision`, `setDepartamento` y `setCentrocostos` actualicen correctamente el estado con los datos recibidos.

3. **Asegúrate de que las listas dependientes se muestran correctamente en el modal**:
    - Verifica que los selectores en el modal se actualicen correctamente cuando cambie el país.

4. **Asegúrate de limpiar el estado del modal correctamente**:
    - Al cerrar el modal o cambiar el país, asegúrate de limpiar el estado adecuadamente para evitar datos inconsistentes.